"""update_transcriptions_table

Revision ID: 7b8f6314a525
Revises: 525d369dc5b6
Create Date: 2025-08-07 19:20:50.296254

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7b8f6314a525"
down_revision = "525d369dc5b6"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # teamsテーブル作成
    op.create_table(
        "teams",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name=op.f("teams_owner_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("teams_pkey")),
    )
    op.create_index(op.f("ix_teams_id"), "teams", ["id"], unique=False)

    # team_membersテーブル作成
    op.create_table(
        "team_members",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("role", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column(
            "joined_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "last_active_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name=op.f("team_members_team_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("team_members_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("team_members_pkey")),
    )
    op.create_index(op.f("ix_team_members_id"), "team_members", ["id"], unique=False)

    # transcriptionsテーブル作成
    op.create_table(
        "transcriptions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "transcription_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "language", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
        sa.Column("confidence_score", sa.FLOAT(), autoincrement=False, nullable=True),
        sa.Column("speaker_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("speaker_labels", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("timestamps", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("voice_session_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "processed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("transcriptions_user_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["voice_session_id"],
            ["voice_sessions.id"],
            name=op.f("transcriptions_voice_session_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("transcriptions_pkey")),
    )
    op.create_index(
        op.f("ix_transcriptions_id"), "transcriptions", ["id"], unique=False
    )

    # analysesテーブル作成
    op.create_table(
        "analyses",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "analysis_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("summary", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("key_points", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("action_items", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("sentiment_score", sa.FLOAT(), autoincrement=False, nullable=True),
        sa.Column("topic_tags", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("transcription_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("voice_session_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("analyses_user_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["transcription_id"],
            ["transcriptions.id"],
            name=op.f("analyses_transcription_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["voice_session_id"],
            ["voice_sessions.id"],
            name=op.f("analyses_voice_session_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("analyses_pkey")),
    )
    op.create_index(op.f("ix_analyses_id"), "analyses", ["id"], unique=False)

    # subscriptionsテーブル作成
    op.create_table(
        "subscriptions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "subscription_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "plan_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column(
            "start_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "end_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("subscriptions_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subscriptions_pkey")),
    )
    op.create_index(op.f("ix_subscriptions_id"), "subscriptions", ["id"], unique=False)

    # billingsテーブル作成
    op.create_table(
        "billings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "billing_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "amount",
            sa.DECIMAL(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("currency", sa.VARCHAR(length=3), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column(
            "payment_method", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("billings_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("billings_pkey")),
    )
    op.create_index(op.f("ix_billings_id"), "billings", ["id"], unique=False)

    # invitationsテーブル作成
    op.create_table(
        "invitations",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("inviter_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("role", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["inviter_id"], ["users.id"], name=op.f("invitations_inviter_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name=op.f("invitations_team_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("invitations_pkey")),
        sa.UniqueConstraint(
            "token",
            name=op.f("invitations_token_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("ix_invitations_id"), "invitations", ["id"], unique=False)

    # audit_logsテーブル作成
    op.create_table(
        "audit_logs",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "action", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "resource_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "resource_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("details", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True
        ),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("audit_logs_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("audit_logs_pkey")),
    )
    op.create_index(op.f("ix_audit_logs_id"), "audit_logs", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_audit_logs_id"), table_name="audit_logs")
    op.drop_table("audit_logs")
    op.drop_index(op.f("ix_invitations_id"), table_name="invitations")
    op.drop_table("invitations")
    op.drop_index(op.f("ix_billings_id"), table_name="billings")
    op.drop_table("billings")
    op.drop_index(op.f("ix_subscriptions_id"), table_name="subscriptions")
    op.drop_table("subscriptions")
    op.drop_index(op.f("ix_analyses_id"), table_name="analyses")
    op.drop_table("analyses")
    op.drop_index(op.f("ix_transcriptions_id"), table_name="transcriptions")
    op.drop_table("transcriptions")
    op.drop_index(op.f("ix_team_members_id"), table_name="team_members")
    op.drop_table("team_members")
    op.drop_index(op.f("ix_teams_id"), table_name="teams")
    op.drop_table("teams")
    # ### end Alembic commands ###
