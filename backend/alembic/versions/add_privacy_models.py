"""add privacy models

Revision ID: add_privacy_models
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'add_privacy_models'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # プライバシーレベルとデータカテゴリのEnumを作成
    op.execute("CREATE TYPE privacylevel AS ENUM ('public', 'team', 'manager', 'private', 'admin')")
    op.execute("CREATE TYPE datacategory AS ENUM ('profile', 'analysis', 'goals', 'improvement', 'communication', 'performance')")
    
    # 暗号化データテーブル
    op.create_table('encrypted_data',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('data_id', sa.String(length=255), nullable=False),
        sa.Column('data_type', sa.String(length=100), nullable=False),
        sa.Column('data_category', postgresql.ENUM('profile', 'analysis', 'goals', 'improvement', 'communication', 'performance', name='datacategory'), nullable=False),
        sa.Column('encrypted_content', sa.Text(), nullable=False),
        sa.Column('encryption_algorithm', sa.String(length=50), nullable=False),
        sa.Column('encryption_key_id', sa.String(length=255), nullable=False),
        sa.Column('iv', sa.String(length=255), nullable=False),
        sa.Column('original_size', sa.Integer(), nullable=True),
        sa.Column('compression_ratio', sa.Integer(), nullable=True),
        sa.Column('owner_id', sa.Integer(), nullable=False),
        sa.Column('privacy_level', postgresql.ENUM('public', 'team', 'manager', 'private', 'admin', name='privacylevel'), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_encrypted_data_data_id'), 'encrypted_data', ['data_id'], unique=True)
    op.create_index(op.f('ix_encrypted_data_id'), 'encrypted_data', ['id'], unique=False)
    
    # データアクセス権限テーブル
    op.create_table('data_access_permissions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('encrypted_data_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('access_level', postgresql.ENUM('public', 'team', 'manager', 'private', 'admin', name='privacylevel'), nullable=False),
        sa.Column('can_read', sa.Boolean(), nullable=True),
        sa.Column('can_write', sa.Boolean(), nullable=True),
        sa.Column('can_delete', sa.Boolean(), nullable=True),
        sa.Column('can_share', sa.Boolean(), nullable=True),
        sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('granted_by', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['encrypted_data_id'], ['encrypted_data.id'], ),
        sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_access_permissions_id'), 'data_access_permissions', ['id'], unique=False)
    
    # プライバシー設定テーブル
    op.create_table('privacy_settings',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('default_profile_privacy', postgresql.ENUM('public', 'team', 'manager', 'private', 'admin', name='privacylevel'), nullable=True),
        sa.Column('default_analysis_privacy', postgresql.ENUM('public', 'team', 'manager', 'private', 'admin', name='privacylevel'), nullable=True),
        sa.Column('default_goals_privacy', postgresql.ENUM('public', 'team', 'manager', 'private', 'admin', name='privacylevel'), nullable=True),
        sa.Column('default_improvement_privacy', postgresql.ENUM('public', 'team', 'manager', 'private', 'admin', name='privacylevel'), nullable=True),
        sa.Column('auto_delete_after_days', sa.Integer(), nullable=True),
        sa.Column('auto_delete_enabled', sa.Boolean(), nullable=True),
        sa.Column('allow_team_sharing', sa.Boolean(), nullable=True),
        sa.Column('allow_manager_access', sa.Boolean(), nullable=True),
        sa.Column('allow_anonymous_analytics', sa.Boolean(), nullable=True),
        sa.Column('notify_on_access', sa.Boolean(), nullable=True),
        sa.Column('notify_on_breach', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_privacy_settings_id'), 'privacy_settings', ['id'], unique=False)
    
    # データ保持ポリシーテーブル
    op.create_table('data_retention_policies',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('data_category', postgresql.ENUM('profile', 'analysis', 'goals', 'improvement', 'communication', 'performance', name='datacategory'), nullable=False),
        sa.Column('user_role', sa.String(length=50), nullable=True),
        sa.Column('retention_days', sa.Integer(), nullable=False),
        sa.Column('deletion_action', sa.String(length=50), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_retention_policies_id'), 'data_retention_policies', ['id'], unique=False)
    
    # プライバシー監査ログテーブル
    op.create_table('privacy_audit_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('data_id', sa.String(length=255), nullable=True),
        sa.Column('action', sa.String(length=100), nullable=False),
        sa.Column('action_details', postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column('accessed_by', sa.Integer(), nullable=True),
        sa.Column('ip_address', sa.String(length=45), nullable=True),
        sa.Column('user_agent', sa.Text(), nullable=True),
        sa.Column('success', sa.Boolean(), nullable=False),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['accessed_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_privacy_audit_logs_id'), 'privacy_audit_logs', ['id'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # テーブルを削除
    op.drop_index(op.f('ix_privacy_audit_logs_id'), table_name='privacy_audit_logs')
    op.drop_table('privacy_audit_logs')
    
    op.drop_index(op.f('ix_data_retention_policies_id'), table_name='data_retention_policies')
    op.drop_table('data_retention_policies')
    
    op.drop_index(op.f('ix_privacy_settings_id'), table_name='privacy_settings')
    op.drop_table('privacy_settings')
    
    op.drop_index(op.f('ix_data_access_permissions_id'), table_name='data_access_permissions')
    op.drop_table('data_access_permissions')
    
    op.drop_index(op.f('ix_encrypted_data_id'), table_name='encrypted_data')
    op.drop_index(op.f('ix_encrypted_data_data_id'), table_name='encrypted_data')
    op.drop_table('encrypted_data')
    
    # Enumを削除
    op.execute("DROP TYPE datacategory")
    op.execute("DROP TYPE privacylevel")
    
    # ### end Alembic commands ###
